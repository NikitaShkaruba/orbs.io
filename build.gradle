// gradle build dependencies
buildscript {
    ext {
        springBootVersion = '1.3.6.RELEASE' 
    } 
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "com.moowork.gradle:gradle-node-plugin:0.13"
    }
}

// Add gradle tasks and dependencies from those plugins
apply plugin: 'java'
apply plugin: 'spring-boot'
// Spock code is written on groovy
apply plugin: 'groovy'

// app dependencies
repositories {
    mavenCentral()
}
dependencies {
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-data-rest')
    compile('org.projectlombok:lombok:1.16.6')
    compile('org.springframework.boot:spring-boot-starter-thymeleaf')
    // We use the latest groovy 2.x version for Spock testing
    compile 'org.codehaus.groovy:groovy-all:2.4.5'
    runtime('com.h2database:h2')
    testCompile('org.springframework.boot:spring-boot-starter-test')
	// Use the awesome Spock testing and specification framework even with Java
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
    testCompile 'junit:junit:4.12'
}

// jar configuration
jar {
    baseName = 'orbs.io'
    version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

// Custom tasks
// Those tasks are configuration phase tasks, which means that they are executed before EVERY other tasks.r
// Todo: change phase of those tasks from configuration to execution
task installFrontendDependencies(type: Exec) { 
    workingDir './src/main/resources/static'

    if (System.getProperty('os.name').toLowerCase().contains('windows')) {
		// cmd cause errors, that's why powershell
        commandLine 'powershell', '/c', 'npm', 'install', '--no-optional' 
        commandLine 'powershell', '/c', 'npm', 'update', 'minimatch'
    } else {
        commandLine 'npm', 'install'
    }
}
task buildAssets(dependsOn: 'installFrontendDependencies', type: Exec) { 
    workingDir './src/main/resources/static'

    if (System.getProperty('os.name').toLowerCase().contains('windows')) {
        commandLine 'powershell', '/c', 'node_modules/.bin/webpack.cmd'
    } else {
        commandLine './node_modules/.bin/webpack'
    }
}

bootRun.dependsOn buildAssets

test {
	//we want display the following test events
    testLogging {
        events "PASSED", "STARTED", "FAILED", "SKIPPED"
    }
}
